Mondy, 6th May 
13:00:41


--------------------Margin-collapse-----------------------
As we have seen, padding is space added inside an element’s border, while margin is space added outside an element’s border.
 One additional difference is that top and bottom margins, also called vertical margins, collapse, while top and bottom padding does not.

Horizontal margins (left and right), like padding, are always displayed and added together.
 For example, if two divs with ids #div-one and #div-two, are next to each other, they will be as far apart as the sum of their adjacent margins.

#img-one {
  margin-right: 20px;
}

#img-two {
  margin-left: 20px;
}

In this example, the space between the #img-one and #img-two borders is 40 pixels. The right margin of #img-one (20px) and the left margin of #img-two (20px) add to make a total margin of 40 pixels.

Unlike horizontal margins, vertical margins do not add. Instead, the larger of the two vertical margins sets the distance between adjacent elements.

#img-one {
  margin-bottom: 30px;
}

#img-two {
  margin-top: 20px;
}

In this example, the vertical margin between the #img-one and #img-two elements is 30 pixels. Although the sum of the margins is 50 pixels, the margin collapses so the spacing is only dependent on the #img-one bottom margin.
It may be helpful to think of collapsing vertical margins as a short person trying to push a taller person. The tall person has longer arms and can easily push the short person, while the person with short arms cannot reach the person with long arms.





--------------------------MAX MIN Height and Width---------------
Because a web page can be viewed through displays of differing screen size, the content on the web page can suffer from those changes in size.
 To avoid this problem, CSS offers two properties that can limit how narrow or how wide an element’s box can be sized to:

min-width —this property ensures a minimum width of an element’s box.
max-width —this property ensures a maximum width of an element’s box.
p {
  min-width: 300px;
  max-width: 600px;
}

In the example above, the width of all paragraphs will not shrink below 300 pixels, nor will the width exceed 600 pixels.

Content, like text, can become difficult to read when a browser window is narrowed or expanded.
 These two properties ensure that content is legible by limiting the minimum and maximum widths of an element.

we can also limit the minimum and maximum height of an element:

min-height — this property ensures a minimum height for an element’s box.
max-height — this property ensures a maximum height of an element’s box.
p {
  min-height: 150px;
  max-height: 300px;
}

In the example above, the height of all paragraphs will not shrink below 150 pixels and the height will not exceed 300 pixels.





------------------------Overflow--------------------
All of the components of  the box model comprise an element's size.for example,an image that has following dimensions 
in 364px wide and 244 px tall.
300 px width.
200px tall.
10 px padding on left and right.
10 px padding on  top and bottom .
2 px borders on the left and right.
2 px border on top and bottom.
20 px margin on the left and right.
10 px margin on the top and bottom.

 the total dimensions (363px by 244px) are calculated by adding all of the vertical dimensions together and all of the horizontal dimensions together. sometimes,these componnents results in an element that is larger than the parents containing area.
  
  How can we ensure that we can view all of an elements that is larger than its parents containing area ?
  -------------> The over over flow property controls what happens to contents that spill at overflows outside its box.The commonly used values are:
hidden—when set to this value, any content that overflows will be hidden from view.
scroll—when set to this value, a scrollbar will be added to the element’s box so that the rest of the content can be viewed by scrolling.
visible—when set to this value, the overflow content will be displayed outside of the containing element. Note, this is the default value.
p {
  overflow: scroll; 
}

In the example above, if any of the paragraph content overflows (perhaps a user resizes their browser window), a scrollbar will appear so that users can view the rest of the content.

The overflow property is set on a parent element to instruct a web browser on how to render child elements. For example, if a div’s overflow property is set to scroll, all children of this div will display overflowing content with a scroll bar.



----------------------------Reseting the Defaults-------------------
All major web browsers have a default stylesheet they use in the absence of an external stylesheet. These default stylesheets are known as user agent stylesheets. In this case, the term user agent is a technical term for the browser.

User agent stylesheets often have default CSS rules that set default values for padding and margin. This affects how the browser displays HTML elements, which can make it difficult for a developer to design or style a web page.

Many developers choose to reset these default values so that they can truly work with a clean slate.

* {
  margin: 0;
  padding: 0;
}

The code in the example above resets the default margin and padding values of all HTML elements. It is often the first CSS rule in an external stylesheet.

Note that both properties are set to 0. When these properties are set to 0, they do not require a unit of measurement.